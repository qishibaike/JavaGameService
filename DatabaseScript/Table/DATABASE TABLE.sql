CREATE DATABASE GAME_SERVICE;
USE GAME_SERVICE

CREATE TABLE PLAYERS (
PID INT NOT NULL AUTO_INCREMENT,
ACCOUNT VARCHAR(25) UNIQUE NOT NULL,
PASSWORD VARCHAR(25) NOT NULL,
NICKNAME VARCHAR(20) UNIQUE NOT NULL,
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
LASTLOGIN TIMESTAMP,
ISBANED TINYINT(1) DEFAULT FALSE,
PRIMARY KEY(PID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;

CREATE TABLE PLAYER_INFO (
PID INT NOT NULL,
NICKNAME VARCHAR(20) UNIQUE NOT NULL,
GOLD INT,
CUR_SCENE SMALLINT,
CUR_POS_X SMALLINT,
CUR_POS_Y SMALLINT,
HP INT,
FOREIGN KEY(PID) REFERENCES PLAYERS(PID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;

CREATE TABLE RESOURCE_LIST (
RID INT,
TYPE INT,
RES_NAME VARCHAR(50),
DESCRIPTION VARCHAR(256),
PRIMARY KEY(RID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;

CREATE TABLE PLAYER_RES (
PID INT NOT NULL,
RID INT NOT NULL,
NUMBER INT NOT NULL,
FOREIGN KEY(PID) REFERENCES PLAYERS(PID),
FOREIGN KEY(RID) REFERENCES RESOURCE_LIST(RID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;

CREATE TABLE MARKET_RES (
ITEMID INT AUTO_INCREMENT,
PID INT NOT NULL,
RID INT NOT NULL,
NUMBER INT NOT NULL,
UNIT_PRICE INT NOT NULL,
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(ID),
FOREIGN KEY(PID) REFERENCES PLAYERS(PID),
FOREIGN KEY(RID) REFERENCES RESOURCE_LIST(RID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;

CREATE TABLE SHIP_LIST (
SHIPID INT NOT NULL,
SHIP_NAME VARCHAR(20) NOT NULL,
DESCRIPTION VARCHAR(256),
PRIMARY KEY(SHIPID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;

CREATE TABLE PLAYER_SHIP (
PID INT NOT NULL,
SHIPID INT NOT NULL,
LEVEL INT NOT NULL,
DETAIL VARCHAR(256),
FOREIGN KEY(PID) REFERENCES PLAYERS(PID),
FOREIGN KEY(SHIPID) REFERENCES SHIP_LIST(SHIPID)
)ENGINE=InnoDB DEFAULT CHARSET=UTF8;


-- 购买市场物品的存储过程
DROP PROCEDURE buyMarketRes;

DELIMITER //
CREATE PROCEDURE buyMarketRes(
	IN in_pid INT,
	IN in_itemid INT,
	IN in_num INT,
	OUT out_message VARCHAR(10)
)
BEGIN
DECLARE player_gold INTEGER DEFAULT -1;
DECLARE item_id INTEGER DEFAULT -1;
DECLARE res_id INTEGER DEFAULT -1;
DECLARE res_unit_price INTEGER DEFAULT -1;
DECLARE res_total_num INTEGER DEFAULT -1;
DECLARE t_error INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET t_error=1;
	
	START TRANSACTION;
	
		SELECT PLAYER_INFO.GOLD
		FROM PLAYER_INFO 
		WHERE PLAYER_INFO.PID = in_pid
		INTO player_gold;
		
		SELECT MARKET_RES.ITEMID, MARKET_RES.RID, MARKET_RES.UNIT_PRICE, MARKET_RES.NUMBER
		FROM MARKET_RES
		WHERE MARKET_RES.ITEMID = in_itemid
		INTO item_id, res_id, res_unit_price, res_total_num;
		
		IF in_num <= res_total_num AND (in_num*res_unit_price) < player_gold THEN
			UPDATE PLAYER_INFO 
			SET PLAYER_INFO.GOLD = (player_gold-in_num*res_unit_price) 
			WHERE PLAYER_INFO.PID = in_pid;
			
			INSERT INTO PLAYER_RES(PID, RID, NUMBER) VALUES(in_pid, res_id, in_num);
            
            IF in_num = res_total_num THEN
				DELETE FROM MARKET_RES
                WHERE MARKET_RES.ITEMID = item_id;
			ELSE
				UPDATE MARKET_RES 
                SET MARKET_RES.NUMBER = (res_total_num - in_num)
                WHERE MARKET_RES.ITEMID = item_id;
            END IF;
		ELSE
			SET t_error = 1;
		END IF;
		
	IF t_error = 1 THEN
		SET out_message = 'error';
		ROLLBACK;
	ELSE
		COMMIT;
	END IF;
	
END//

DELIMITER ;